/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preserve that ability, always export from Quest to regenerate this file.
 *   To setup element attributes and CSS properties, use the Quest web app
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React from 'react';
import { Tooltip } from '@mui/material';
import { styled } from '@mui/material/styles';
import { animated, useSpring, easings } from 'react-spring';
import useSampleCard from 'src/components/SampleCard/useSampleCard';

const TypeQuest = animated(
  styled('div')(({ theme }) => ({
    backgroundColor: `rgba(250, 250, 250, 1)`,
    boxShadow: `0px 4px 8px rgba(0, 0, 0, 0.16)`,
    borderRadius: `8px`,
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `column`,
    width: '100%',
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    padding: `0px`,
    boxSizing: `border-box`,
    overflow: `hidden`,
    height: 'auto',
  }))
);

const ImageFrame = styled('div')({
  borderRadius: `0px`,
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `10px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
});

const Image1 = animated(
  styled('div', {
    shouldForwardProp: (prop) => !['props'].includes(prop.toString()),
  })(({ props }) => ({
    backgroundPosition: `center`,
    backgroundSize: `cover`,
    backgroundRepeat: `no-repeat`,
    borderRadius: `6px`,
    display: `flex`,
    position: `relative`,
    isolation: `isolate`,
    flexDirection: `row`,
    justifyContent: `flex-start`,
    alignItems: `flex-start`,
    alignSelf: `stretch`,
    height: `251px`,
    margin: `0px`,
    backgroundImage: props.post.image,
  }))
);

function SampleCard(props) {
  const { fns } = useSampleCard(props);

  const [TypeQuestSpring, TypeQuestApi] = useSpring(() => ({
    config: {
      duration: 100,
      easing: easings['easeOutBack'],
    },
    delay: 0,
    from: { transform: 'scale(1)' },
  }));

  const [Image1Spring, Image1Api] = useSpring(() => ({
    config: {
      duration: 750,
      easing: easings['easeInOutQuint'],
    },
    delay: 1000,
    from: { transform: 'scale(0.9)', opacity: 0 },
  }));

  React.useEffect(() => {
    Image1Api.start({
      ...{ transform: 'scale(1)', opacity: 1 },
      delay: 1000,
      config: { duration: 750 },
    });
  }, []);

  return (
    <TypeQuest
      onMouseLeave={() => {
        TypeQuestApi.start({ transform: 'scale(1)' });
      }}
      onMouseEnter={() => {
        TypeQuestApi.start({ ...{ transform: 'scale(1.05)' }, delay: 0 });
      }}
      className={props.className}
      style={{ ...TypeQuestSpring }}
    >
      {props.posts &&
        props.posts.map((post, index) => {
          return (
            <ImageFrame key={index}>
              <Tooltip
                arrow={true}
                placement={'top'}
                title={'This is an Image'}
              >
                <Image1 props={props} style={{ ...Image1Spring }}></Image1>
              </Tooltip>
            </ImageFrame>
          );
        })}
    </TypeQuest>
  );
}

export default SampleCard;
